plugins {
	id 'java'
	id 'application'
	id 'jacoco'
}

def properties = new Properties()
file("src/main/resources/gradle.properties").withInputStream { properties.load(it) }
version = properties.getProperty("panl.version")
group = 'com.synapticloop'

repositories {
	mavenCentral()
}

java {
		toolchain {
				languageVersion = JavaLanguageVersion.of(11)
		}
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration/java')
		}
		resources.srcDir file('src/integration/resources')
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestRuntime.extendsFrom runtime
}

dependencies {
	// solrj
	implementation 'org.apache.solr:solr-solrj:9.6.1'
	implementation 'org.apache.solr:solr-solrj-zookeeper:9.6.1'

	// HTTP server
	implementation 'org.eclipse.jetty.http2:http2-server:10.0.20'
	implementation 'org.eclipse.jetty:jetty-servlet:10.0.20'

	// logging
	implementation 'org.slf4j:slf4j-api:2.0.13'
	implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'


	// additional utilities
	implementation 'commons-io:commons-io:2.16.1'
	implementation 'org.json:json:20240303'
	implementation 'net.harawata:appdirs:1.2.2'

	// testing
	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.mockito:mockito-core:5.14.2'
	testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	testImplementation 'org.powermock:powermock-module-junit4:2.0.9'

	// for the panl editor
	implementation "com.formdev:flatlaf:3.5.1"
	implementation 'org.apache.commons:commons-lang3:3.17.0'


	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	//
	// integration testing
	//
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	integrationTestImplementation platform('org.junit:junit-bom:5.9.1')
	integrationTestImplementation 'org.junit.jupiter:junit-jupiter'
	integrationTestImplementation 'org.mockito:mockito-core:5.12.0'
	integrationTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	integrationTestImplementation 'commons-io:commons-io:2.16.1'
	integrationTestImplementation 'org.json:json:20240303'
	// HTTP server
	integrationTestImplementation 'org.eclipse.jetty.http2:http2-server:10.0.20'
	integrationTestImplementation 'org.eclipse.jetty:jetty-servlet:10.0.20'

	// logging
	integrationTestImplementation 'org.slf4j:slf4j-api:2.0.13'
	integrationTestImplementation 'org.apache.logging.log4j:log4j-core:2.23.1'
	integrationTestImplementation 'org.apache.logging.log4j:log4j-api:2.23.1'
	integrationTestImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'


	// additional utilities
	integrationTestImplementation 'commons-io:commons-io:2.16.1'
	integrationTestImplementation 'org.json:json:20240303'}

application {
	mainClass = 'com.synapticloop.panl.Main'
}

distributions {
	main {
		distributionBaseName = 'solr-panl-' + properties.getProperty("panl.solr.version")
	}

	configurations.all {
		resolutionStrategy {
			failOnVersionConflict()
			force "org.slf4j:slf4j-api:2.0.13",
					"commons-io:commons-io:2.16.1",
					"com.fasterxml.jackson.core:jackson-databind:2.17.1",
					"com.fasterxml.jackson.core:jackson-annotations:2.17.1",
					"org.mockito:mockito-core:5.14.2",
					"net.bytebuddy:byte-buddy:1.15.4",
					"net.bytebuddy:byte-buddy-agent:1.15.4",
					"org.objenesis:objenesis:3.3"

		}
	}
}

task copyLoggingFile {
	copy {
		from file("src/main/resources/log4j2.xml")
		into file("src/dist/lib/")
	}
}

tasks.startScripts.doLast {
	def unixScriptFile = file getUnixScript()
	unixScriptFile.text = unixScriptFile.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Dlog4j2.configurationFile=lib/log4j2.xml"')

	def windowsScriptFile = file getWindowsScript()
	windowsScriptFile.text = windowsScriptFile.text.replace('set DEFAULT_JVM_OPTS=', 'set DEFAULT_JVM_OPTS=-Dlog4j2.configurationFile=lib\\log4j2.xml')
}

//
// Exclude the Log4J configuration
//
jar {
	exclude('log4j2.xml')
}


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	classpath += sourceSets.main.runtimeClasspath
	outputs.upToDateWhen { false }
}

jacocoTestReport {
	dependsOn test
}

