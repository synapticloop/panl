plugins {
	id 'java'
	id 'application'
	id 'jacoco'
	id "synapticloop.copyrightr" version "1.3.1"
}

// load the properties for versioning - not that this is also used by the Panl
// server to output the version on startup.
def properties = new Properties()
file("src/main/resources/gradle.properties").withInputStream { properties.load(it) }

version = properties.getProperty("panl.version")
group = 'com.synapticloop'

repositories {
	mavenCentral()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

sourceSets {
	testIntegration {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/testintegration/java')
			resources.srcDir file('src/testintegration/resources')
		}
	}

	testIntegrationSpider {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/testintegrationspider/java')
			resources.srcDir file('src/testintegrationspider/resources')
		}
	}
}

configurations {
	testIntegrationCompile.extendsFrom testCompile
	testIntegrationRuntime.extendsFrom testRuntime
	testIntegrationRuntime.extendsFrom runtime

	testIntegrationSpiderCompile.extendsFrom testCompile
	testIntegrationSpiderRuntime.extendsFrom testRuntime
	testIntegrationSpiderRuntime.extendsFrom runtime
}

dependencies {
	// solrj
	implementation 'org.apache.solr:solr-solrj:7.7.3'

	// logging
	implementation 'org.slf4j:slf4j-api:2.0.13'
	implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'


	// additional utilities
	implementation 'commons-io:commons-io:2.16.1'
	implementation 'org.json:json:20240303'
	implementation 'net.harawata:appdirs:1.2.2'

	// testing
	testImplementation 'org.apache.solr:solr-solrj:7.7.3'
	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.mockito:mockito-core:5.14.2'
	testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	testImplementation 'commons-codec:commons-codec:1.17.1'

	// for the panl editor
	implementation "com.formdev:flatlaf:3.5.1"
	implementation 'org.apache.commons:commons-lang3:3.18.0'


	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	//
	// integration testing
	//
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	testIntegrationImplementation 'org.apache.solr:solr-solrj:7.7.3'
	testIntegrationImplementation platform('org.junit:junit-bom:5.9.1')
	testIntegrationImplementation 'org.junit.jupiter:junit-jupiter'
	testIntegrationImplementation 'org.mockito:mockito-core:5.12.0'
	testIntegrationImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	testIntegrationImplementation 'commons-io:commons-io:2.16.1'
	testIntegrationImplementation 'org.json:json:20240303'

	// logging
	testIntegrationImplementation 'org.slf4j:slf4j-api:2.0.13'
	testIntegrationImplementation 'org.apache.logging.log4j:log4j-core:2.23.1'
	testIntegrationImplementation 'org.apache.logging.log4j:log4j-api:2.23.1'
	testIntegrationImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'


	// additional utilities
	testIntegrationImplementation 'commons-io:commons-io:2.16.1'
	testIntegrationImplementation 'org.json:json:20240303'

	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	//
	// Site Spidering
	//
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	testIntegrationSpiderImplementation 'org.apache.solr:solr-solrj:7.7.3'
	testIntegrationSpiderImplementation platform('org.junit:junit-bom:5.9.1')
	testIntegrationSpiderImplementation 'org.junit.jupiter:junit-jupiter'
	testIntegrationSpiderImplementation 'org.mockito:mockito-core:5.12.0'
	testIntegrationSpiderImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	testIntegrationSpiderImplementation 'commons-io:commons-io:2.16.1'
	testIntegrationSpiderImplementation 'org.json:json:20240303'

	// logging
	testIntegrationSpiderImplementation 'org.slf4j:slf4j-api:2.0.13'
	testIntegrationSpiderImplementation 'org.apache.logging.log4j:log4j-core:2.23.1'
	testIntegrationSpiderImplementation 'org.apache.logging.log4j:log4j-api:2.23.1'
	testIntegrationSpiderImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'

	// additional utilities
	testIntegrationSpiderImplementation 'commons-io:commons-io:2.16.1'
	testIntegrationSpiderImplementation 'org.json:json:20240303'
}

application {
	mainClass = 'com.synapticloop.panl.Main'
}

startScripts {
	classpath = files( '$APP_HOME/lib/*' )
}

distributions {
	main {
		distributionBaseName = 'solr-panl-' + properties.getProperty("panl.solr.version")
	}

	configurations.all {
		resolutionStrategy {
			failOnVersionConflict()
			force "org.slf4j:slf4j-api:2.0.13",
					"commons-io:commons-io:2.16.1",
					"com.fasterxml.jackson.core:jackson-databind:2.17.1",
					"com.fasterxml.jackson.core:jackson-annotations:2.17.1",
					"org.mockito:mockito-core:5.14.2",
					"net.bytebuddy:byte-buddy:1.15.4",
					"net.bytebuddy:byte-buddy-agent:1.15.4",
					"org.objenesis:objenesis:3.3",
					"commons-codec:commons-codec:1.17.1"

		}
	}
}

tasks.register('copyLoggingFile') {
	copy {
		from file("src/main/resources/log4j2.xml")
		into file("src/dist/lib/")
	}
}

tasks.register('dockerWindows', Exec) {
	commandLine "cmd.exe", "/C", "build-docker", "solr-panl-" + properties.getProperty("panl.solr.version") + "-" + properties.getProperty("panl.version")
	dependsOn tasks.distTar
}

tasks.register('dockerLinux', Exec) {
	commandLine "./build-docker.sh", "solr-panl-" + properties.getProperty("panl.solr.version") + "-" + properties.getProperty("panl.version")
	dependsOn tasks.distTar
}

import org.apache.tools.ant.taskdefs.condition.Os

tasks.register('docker') {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		dependsOn('dockerWindows')
	} else {
		dependsOn('dockerLinux')
	}
}
tasks.withType(Copy).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.register('testIntegration', Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.testIntegration.output.classesDirs
	classpath = sourceSets.testIntegration.runtimeClasspath
	classpath += sourceSets.main.runtimeClasspath
	outputs.upToDateWhen { false }
}

tasks.register('testIntegrationSpider', Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.testIntegrationSpider.output.classesDirs
	classpath = sourceSets.testIntegrationSpider.runtimeClasspath
	classpath += sourceSets.main.runtimeClasspath
	outputs.upToDateWhen { false }
}

tasks.named('distTar', Tar) {
	// Example: Change the compression to GZIP (if it wasn't already)
	compression = Compression.GZIP
}

jacocoTestReport {
	dependsOn test
}

copyrightr {
	dryRun = false
	copyrightHolder = "synapticloop"
	includes = [
			"src/**/*.java",
			"src/**/*.js"
	]
	excludes = [
			"src/test/java/**/*.java",
			"src/testintegration/java/**/*.java",
			"src/testintegrationspider/java/**/*.java",
			"**/*.class",
			"**/package-info.java",
			"**/LpseTokeniser.java",
			"**/*.*",
			"**/nouislider.min.js"
	]
	onlyReplaceFirst = true
	yearSeparator = " - "
	failOnMissing = false
}

